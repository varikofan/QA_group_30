HW клиент-серверная архитеркура (@varikofan) QA group 30 free

                     1) Прочиать про клиент-серверную архитектуру
Клиент - железо, или софт, который отправляет запрос на сервер.
На сайте после адреса / идёт т.н. endpoint, т.е. API соединяющий в точке касания сервера нас.
API - application programm interface. У человека интерфейс например глаза, уши итд.
Запрос - request, Ответ - response.
HTML (Hyper Text Markup Language-язык гипертекстовой разметки) - "скелет" в котором описана структура расположение элементов.
CSS (Cascading Style Sheets-каскадная талица стилей) - "мясо", содержание элементов, такие как цвет, стиль, шрифт и тд.
JS (Java Script-мультипарадигменный язык программирования) - механизм взаимодействия всех элементов (front-end)
Клиент-серверная архитертура - это архитектура, в которой сетевая нагрузка распределяется между поставщиками услуг (серверы) и заказчиками услуг (клиенты). Фактически, клиент и сервер это ПО, которые обычно расположены на разных вычислительных машинах и взаимодействуют между собой через сетевые протоколы. Но, также клиент может располагаться на одной машине.
Клиент: тонкий и толстый
Тонкий клиент - ПК, или программа, которая переносит большую часть обработки информации на сервер (браузер, например).
Толстый клиент - приложение, которое обеспечивает расширенную функциональность, независимо от центрального сервера (1С бухгалтерия, онлайн игры...)
 
                            2) Что такое HTTP и HTTPS
HTTP - самый популярный протокол.
Преимущества:
- отсутствует дублирование кода программы сервера, программами клиента
- т.к все вычисления происходят на сервере, то требования к клиенту снижаются
- все данные хранятся на сервере, которые как правило хорошо защищенные
- на сервере проще организовать контроль полномочий, чтобы давать доступ к данным только клиентам с правами доступа
Недостатки:
- если не работает сервер, то вся вычислительная сеть не будет работать
- для поддержки данной системы требуется отдельный специалист (системный администратор) и высокая стоимость оборудования.
- HTTP (HyperText Transfer Protocol) ― это протокол передачи данных в интернете по 80 порту. С его помощью браузер получает информацию от сервера и показывает пользователю контент. Он даёт стандартные правилавзаимодейтсвия браузеров и серверов.
- HTTPS (от англ. HyperText Transfer Protocol Secure) ― защищённый протокол передачи данных в интернете по 443 порту. Это тот же протокол HTTP, но защищенный шифрованием всего трафика с помощью SSL-сертификата.
Протокол - набор правил, которому решили следовать для взаимодействия между собой сторон. Если правила не соблюдаются, то взаимодействовать не смогут.
HTTP - клиент-серверный протокол, т.е запросы отправляются какой-то одной стороной (user-agent), может быть прокси вместо него, чаще всего в качестве участника выступает браузер, но им может быть кто угодно...
Между запросом и ответом существует множество посредников (proxy).
Прокси - выполняет различные операции и работают как шлюзы или кэш.
User agent - любой инструмент, или устройство, которое действует от лица пользователя. (чаще всего это браузер или программа)
Браузер - создаёт запрос, а сервер обычно этого не делает. Браузер получет HTML и изучает структуру, чтобы запросить какие-либо картинки, CSS-стили, доп.ресурсы/файлы. Они могут быть расположены в разных местах. Далее браузер соединяет все ресурсы для отображения пользователю в виде единого документа (веб-страница). Веб-сервер отвечает на запрос, предоставляя доступ к данным.

                                  3) HTTP методы
1. Get - запрашивает представление ресурса. Такие запросы могут извлекать данные.
2. Head - запрашивает ресурс как и Get, но ответ без тела.
3. Post - отправляет сущности к указанному ресурсу. Может вызывать побочные эффекты на сервере и изменение состояния.
4. Put - заменяет текущее представления ресурса данными запроса.
5. Delete - удаляет указанный ресурс.
6. Connect - настраивает туннель с сервером, определенным по ресурсу.
7. Options - описывает параметры соединения с ресурсом.
8. Trace - вызывает возвращаемое текстовое сообщение с ресурса.
9. Patch - частично изменяет ресурс.

                                   4) HTTP статус коды сервера
- 500 internal server error - любая внутренняя ошибка сервера
- 501 not implemented - сервер не поддерживает возможностей
- 502 bad gateway - сервер получил недействительное ответное сообщение от вышестоящего сервера
- 503 service unavailable - сервер временно не имеет возможности обрабатывать запрос по технической причине
- 504 gateway timeout - сервер не дождался ответа от вышестоящего сервера для завершения запроса
- 505 HTTP version not supported - сервер не поддерживает или отказывается поддерживать версию протокола
- 506 Variant also negotiates - в результате ошибочной конфигурации
- 507 insufficient storage - не хватает места для выполнения запроса
- 508 loop detected - операция отменена, тк сервер обнаружил бесконечный цикл без ограничения глубины
- 509 bandwidth limit Ex ceeded - при превышении потребления трафика
- 510 not extended - на сервере отсутствует расширение, которое использует (желает) клиент
- 511 network authentication required - это ответ сервера-посредника, который требует авторизации
- 520 unknown error - сервер не смог обработать ошибку
- 521 web server is down - подключение отклоняется сервером
- 522 connection timed out - не удалось подключиться к серверу
- 523 origin is uncreachable - когда сервер недостежим
- 524 a timed occured - истек таймаут подключения к серверу
- 525 SSL handshake failed - ошибка рукопожатия SSL сервера и веб-сервиса
- 526 invalid SSL certificate - не удалось подтвердить сертификат шифрования веб-сервиса

                                 5) Что такое ядро браузера 
Браузерный движок (ядро) - представляет собой программу преобразующую содержимое веб-страниц (HTML, XML, изображения...) и информацию о форматировании содержимого на экране.

                            6) Какие браузеры какиие ядра используют
1. MSHTML (он же Trident) в составе Microsoft IE
2. Gecko в составе Mozilla Firefox
3. Webkit в составе Safari и Chrome
4. Presto в составе Opera.

                                      7) Что такое API
API (application program interface) - контракт, который предоставляет программа (способы обращений и обязанности/ответственность).
Маршрут (Route) - это "имя" которое отсылает работу API к определенным endpoint'ам. Если упростить, то маршрут - URL к которому можно обратиться разными HTTP методами, он может иметь несколько endpoints.

                                    8) Что такое ендпоинты
Endpoint - это само обращение к маршруту отдельным HTTP методом. Он выполняет конкретную задачу, принимает параметры и возвращает данные клиенту.

                                    9) URL (URI, URL, URN)
URI (Uniform Resource Identifier) - строка символов, использующаяся для идентификации какого-либо ресурса по его адресу или имени, либо по адресу и имени вместе.
URL (Uniform Resource Locator) - строка символов для идентификации ресурса по его адресу или местоположению.
URN (Uniform Resource Name) - строка символов, для идентификации ресурса по имени.

                                 10) Идемпотентные HTTP методы
Идемпотентные - при повторном выполнении результаты одиноковые (Get. Head. Put. Delete. Options. Trace)

                                  11) Безопасные HTTP методы
Безопасные - не меняют данные, можно выполнять их в любой последовательности (GET. Head. Options)

                            12) Иденфикация, Аутентификация, Авторизация
Идентификация - соответствие имени пользователя с БД.
Аутентификация - проверка на соответствие логина и пароля с БД.
Авторизация - выдача доступных пользователю инструментов и функций в пользование.

                                        13) Что такое IP
IP (internet protocol. межсетевой протокол) - маршрутизируемый протокол сетевого уровня стека TCP/IP. Именно IP объединил отдельные компьютерные сети во всемирную сеть интернет.
Маршрутизация - процесс определения маршрута данных в сетях. 
IP объединяет сегменты сети в единую сеть, обеспечивая доставку пакетов данных между любыми узлами сети через произвольное число промежуточных узлов (маршрутизаторов).

                                     14) Что такое октеты в DNS
DNS (Domain Name System) - это компьютерная распределенная система для получения информации о доменах. Таким образом DNS позволяет браузеру найти запрошенный сайт по имени домена.
Октет - восемь (8) двоичных разрядов. В русском языке называют байтом. Октет может принимать 256 возможных состояний (кодов, значений, комбинаций битов (0/1)).
Заголовок состоит из 12 октет в DNS.

                          15) Что такое порт, сколько портов у Linux сервера
Порт сервера - цифровой идентификатор (набор цифр до 16 бит) программы, которая используется для создания интернет соединений к ip-адресу. Порты нужны для создания нескольких соединений по одному IP.
Порт - число от 1024 до 65535. Все номера до 1024 зарезервированы и используются службами, например ssh - 22, http - 80, ftp - 21 ...

                                         16) Уровни OSI
Открытая сетевая модель OSI (Open sestem interconnection model) - имеет 7 уровней (layer):
7. Прикладной уровень (application)
6. Уровень представления (presentation)
5. сеансовый уровень (session)
4. транспортный (transport)
3. сетевой (network)
2. канальный (data limk)
1. физический уровень (physical)

                                      17) Хедеры http запросов
A-IM: цель
Accept: принимать
Accept-Charset: допустимое значение
Accept-Encoding: допустимые кодировки
Accept-Language: принять язык
Accept-Datatime: принять дэдлайн
Access-Control-Request-Headers: заголовки запроса контроля доступа
Access-Control-Request-Method: доступ контроль запрос метод
Authorization: авторизация
Cache-Control: кэш контроль
Connection: связь
Content-Length: длина тела
Content-Type: тип содержимого
Cookie: куки файлы
Date: дата
Expect: ожидать
Forwarded: переадресовано
From: из (например почтовый адрес)
Host: хозяин
If-Match: если совпадение
If-Modified-Since: вернуть заголовок ответа 304, если не было изменений.
If-None-Match: если не было совпадений
If-Range: если диапозон
If-Unmodified-Since: если не измененный с (дата)
Max-Forwards: ограничить переадресацию
Origin: источник
Pragma: для обратной совместимости с кешами HTTP/1.0
Proxy-Authorization: прокси авторизация
Range: классифицировать
Referer: референт
TE: кодировки клиента (compress, deflate, gzip, trailers)
User-Agent: пользователь агент
Upgrade: обновление
Via: через какой прокси запрос
Warning: предупреждение
DNT: просит не отслеживать клиента.
