GitHub. HW_1 group 30 free QA (@varikofan)

JSON
 4. Создать внешний репозиторий c названием JSON.
GitHub.com -> Repository -> New -> "JSON" -> Create

 5. Клонировать репозиторий JSON на локальный компьютер.
 git clone git@github.com:varikofan/JSON.git

 6. Внутри локального JSON создать файл “new.json”.
 cd JSON
 touch new.json
 
 7. Добавить файл под гит.
 git add .
 
 8. Закоммитить файл.
 git commit new.json -m "add file new"
 
 9. Отправить файл на внешний GitHub репозиторий.
 git push
 
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата) в формате JSON.
 nano new.json
 { "ФИО":"Паршин Владислав Дмитриевич",
"Возраст":26 ,
"Количество домашних животных":0 ,
"Желаемая зарплата в $":1000 }
^O
^X

 11. Отправить изменения на внешний репозиторий.
git commit -am "add info about me"
git push

 12. Создать файл preferences.json
 touch preferences.json
 
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
 cat > preferences.json
 { "Любимый фильм":"Платформа",
"Любимый сериал":"Не виновен",
"Любимая еда":"Хлеб да масло",
"Любимое время года":"Весна",
"Страна, которую хочется посетить":"Швейцария" }

 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
 cat > skills.json
 { 
 "Скиллы, изученные на курсе": 
 [
 "1. Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC.",
 "2. Что такое клиент-серверная архитектура.",
 "3. HTTP Методы запросов на сервер.",
 "4. Коды ответов HTTP сервера.",
 "5. Структуры HTTP запросов и ответов.",
 "6. Что такое JSON, XML. Их структура.",
 "7. Тестирование API через Postman (JS, автотесты API).",
 "8. Снятие и чтение логов c внешнего сервера.",
 "9. Снифинг http web трафика через Charles и Fiddler.",
 "10. Dev Tools веб браузеров (Google Chrome, FireFox).",
 "11. VPN. (Как работает, зачем нужен, как использовать, варианты инструментов) ",
 "12. Мобильное тестирование.",
 "13. Особенность iOS, Android, гайдлайны.",
 "14. Сборка iOS приложений на XCode.",
 "15. Сборка Android приложений на Android Studio.",
 "16. ADB (управление андройд девайсами).",
 "17. Настройка прокси и vpn на iOS и Android.",
 "18. Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android.",
 "19. Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса) ",
 "20. Основы bash скриптинг, автоматизация рутинных задач на сервере.",
 "21. Доступ к удалённым серверам.",
 "22. Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join).",
 "23. База данных Postgres (установка, настройка и использование).",
 "24. Нереляционная база данных Redis (установка, настройка и использование).",
 "25. Нагрузочное тестирование в Jmeter.",
 "26. Методология разработки Scrum."
 ]
 }
 
 15. Отправить сразу 2 файла на внешний репозиторий.
 git add .
 git commit -m "add preferences and skills for me"
 git push
 
 16. На веб интерфейсе создать файл bug_report.json.
 GitHub.com -> Repositories -> JSON -> Add file -> Create new file -> bug_report.json
 
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 Create bug_report.json -> add file for bug reports -> Commit new file
 
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 bug_report.json -> Edit this file (карандашик)
 {
 "ID":1,
 "Краткое описание":" что? где? кок?",
 "Подробное описание":
 [ "шаги которые важны",
 "актуальный результат",
 "ожидаемый результат" ]
 "Важность":"блокирующая/критическая/высокая/низкая/самая низкая/",
 "Срочность":"наивысшая/высокая/обычная/низкая"
 }
 
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Commit changes
 
 20. Синхронизировать внешний и локальный репозиторий JSON
git fetch
git pull

XML
 21. Создать внешний репозиторий c названием XML.
 GitHub.com -> Repository -> New -> "XML" -> Create
 
 22. Клонировать репозиторий XML на локальный компьютер.
 git clone git@github.com:varikofan/XML.git
 
 23. Внутри локального XML создать файл “new.xml”.
 cd XML
 touch new.xml
 
 24. Добавить файл под гит.
 git add .
 
 25. Закоммитить файл.
 git commit -m "add new file xml"
 
 26. Отправить файл на внешний GitHub репозиторий.
 git push
 
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
 cat > new.xml
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<О_себе>
<ФИО>:"Паршин Владислав Дмитриевич"</ФИО>
<Возраст>"26"</Возраст>
<Количество_домашних_животных>"0"</Количество_домашних_животных>
<Желаемая_зарплата>"1000$"</Желаемая_зарплата>
</О_себе>
 
 28. Отправить изменения на внешний репозиторий.
 git commit -am "add info new xml"
 git push
 
 29. Создать файл preferences.xml
 touch preferences.xml
 
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
 cat > preferences.xml
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Предпочтения>
<Любимый_фильм>"Платформа"</Любимый_фильм>
<Любимый_сериал>"Не виновен"</Любимый_сериал>
<Любимая_еда>"Хлеб да масло"</Любимая_еда>
<Любимое_время_года>"Весна"</Любимое_время_года>
<Страна_которую_хочется_посетить>"Швейцария"</Страна_которую_хочется_посетить>
</Предпочтения>
 
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
 cat > skills.xml
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Skills>
<I>"Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC"</I>
<II>"Что такое клиент-серверная архитектура"</II>
<III>"HTTP Методы запросов на сервер"</III>
<IV>"Коды ответов HTTP сервера"</IV>
<V>"Структуры HTTP запросов и ответов"</V>
<VI>"Что такое JSON, XML. Их структура"</VI>
<VII>"Тестирование API через Postman (JS, автотесты API)"</VII>
<VIII>"Снятие и чтение логов c внешнего сервера"</VIII>
<IX>"Снифинг http web трафика через Charles и Fiddler"</IX>
<X>"Dev Tools веб браузеров (Google Chrome, FireFox)"</X>
<XI>"VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)"</XI>
<XII>"Мобильное тестирование"</XII>
<XIII>"Особенность iOS, Android, гайдлайны"</XIII>
<XIV>"Сборка iOS приложений на XCode"</XIV>
<XV>"Сборка Android приложений на Android Studio"</XV>
<XVI>"ADB (управление андройд девайсами)"</XVI>
<XVII>"Настройка прокси и vpn на iOS и Android"</XVII>
<XVIII>"Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android"</XVIII>
<XIX>"Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)"</XIX>
<XX>"Основы bash скриптинг, автоматизация рутинных задач на сервере"</XX>
<XXI>"Доступ к удалённым серверам"</XXI>
<XXII>"Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join)"</XXII>
<XXIII>"База данных Postgres (установка, настройка и использование)"</XXIII>
<XXIV>"Нереляционная база данных Redis (установка, настройка и использование)"</XXIV>
<XXV>"Нагрузочное тестирование в Jmeter"</XXV>
<XXVI>"Методология разработки Scrum"</XXVI>
</Skills>
 
 32. Сделать коммит в одну строку.
 git add . && git commit -am "add preferences and skills"

 33. Отправить сразу 2 файла на внешний репозиторий.
 git push
 
 34. На веб интерфейсе создать файл bug_report.xml.
 GitHub.com -> Repositories -> XML -> Add file -> Create new file -> bug_report.xml
 
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 Create bug_report.xml -> Commit new file
 
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Баг_репорт>
<ID>"1"</ID>
<Краткое_описание>" что? где? кок?"</Краткое_описание>
<Подробное_описание>
  <путь>"шаги которые важны"</путь>
  <АР>"актуальный результат"</АР>
  <ОР>"ожидаемый результат"</ОР>
</Подробное_описание>
<Важность>"блокирующая/критическая/высокая/низкая/самая низкая/"</Важность>
<Срочность>"наивысшая/высокая/обычная/низкая"</Срочность>
</Баг_репорт>
 
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 Commit changes
 
 38. Синхронизировать внешний и локальный репозиторий
 git pull
 
 TXT
 1. Создать внешний репозиторий c названием TXT.
  GitHub.com -> Repository -> New -> "TXT" -> Create
  
 2. Клонировать репозиторий TXT на локальный компьютер.
  git clone git@github.com:varikofan/TXT.git
 
 3. Внутри локального TXT создать файл “new.txt”.
 cd TXT
 touch new.txt
 
 4. Добавить файл под гит.
 git add .
 
 5. Закоммитить файл.
 git commit -am "add new file txt"
 
 6. Отправить файл на внешний GitHub репозиторий.
 git push
 
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
 cat new.txt
ФИО - Паршин Владислав Дмитриевич
Возраст - 26
Количество домашних животных - 0
Желаемая зарплата в $ - 1000
^C

 8. Отправить изменения на внешний репозиторий.
git commit -am "add info"
git push

 9. Создать файл preferences.txt
 touch preferences.txt
 
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
 cat > preferences.txt
Любимый фильм - Платформа
Любимый сериал - Не виновен
Любимая еда - Хлеб да масло
Любимое время года - Весна
Страна, которую хочется посетить - Швейцария
^C
 
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
 cat > skills.txt
  Скиллы, изученные на курсе:
 
 1. Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC.
 2. Что такое клиент-серверная архитектура.
 3. HTTP Методы запросов на сервер.
 4. Коды ответов HTTP сервера.
 5. Структуры HTTP запросов и ответов.
 6. Что такое JSON, XML. Их структура.
 7. Тестирование API через Postman (JS, автотесты API).
 8. Снятие и чтение логов c внешнего сервера.
 9. Снифинг http web трафика через Charles и Fiddler.
 10. Dev Tools веб браузеров (Google Chrome, FireFox).
 11. VPN. (Как работает, зачем нужен, как использовать, варианты инструментов).
 12. Мобильное тестирование.
 13. Особенность iOS, Android, гайдлайны.
 14. Сборка iOS приложений на XCode.
 15. Сборка Android приложений на Android Studio.
 16. ADB (управление андройд девайсами).
 17. Настройка прокси и vpn на iOS и Android.
 18. Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android.
 19. Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса).
 20. Основы bash скриптинг, автоматизация рутинных задач на сервере.
 21. Доступ к удалённым серверам.
 22. Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join).
 23. База данных Postgres (установка, настройка и использование).
 24. Нереляционная база данных Redis (установка, настройка и использование).
 25. Нагрузочное тестирование в Jmeter.
 26. Методология разработки Scrum.
 ^C
 
 12. Сделать коммит в одну строку.
git add . && git commit -am "add info about preferences and skills"
 
 13. Отправить сразу 2 файла на внешний репозиторий.
 git push 
 
 14. На веб интерфейсе создать файл bug_report.txt.
 GitHub.com -> Repositories -> TXT -> Add file -> Create new file -> bug_report.txt
 
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 Create bug_report.txt -> Commit new file
 
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 bug_report.txt -> Edit this file (карандашик)
 
 ID:1
 Краткое описание: что? где? как?
 Подробное описание: 
 - шаги которые важны, 
 - актуальный результат, 
 - ожидаемый результат.
 Важность: блокирующая/критическая/высокая/низкая/самая низкая/,
 Срочность: наивысшая/высокая/обычная/низкая
 
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
  "add bug id 1"
  Commit changes
  
 18. Синхронизировать внешний и локальный репозиторий
 git pull
